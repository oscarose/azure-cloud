# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Validate-Terraform-init-plan-apply.yml

on:
  workflow_dispatch:
    inputs:
      run_apply:
        required: true
        description: Whether or not to run Terraform apply
        type: boolean
        default: false
      run_destroy:
        required: true
        description: Whether or not to run Terraform destroy
        type: boolean
        default: false  
  pull_request:
    paths:
      - '.github/workflow/terraform.yml'
    branches:
      - main
  push:
    paths:
      - '.github/workflow/terraform.yml'
    branches:
      - main

permissions:
  id-token: write
  contents: read
  pull-requests: write
  
env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }} # abraham token

jobs:
  run_tf_fmt_check:
    name: Terraform fmt check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Terraform Format
      run: terraform fmt -check -recursive

  run_tf_init_plan:
    name: Terraform init and plan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -input=false

  run_apply_destroy:
    name: Terraform apply and destroy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -input=false

    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      #if: github.workflow_dispatch == true
      if: inputs.run_apply == true
      run: terraform apply -auto-approve -input=false

    - name: TF state pull
      run: terraform state pull  

    - name: TF workspace 
      run: terraform workspace show  

    - name: TF Destroy
      if: inputs.run_destroy == true
      run: terraform destroy -auto-approve -input=false
